From 260e7b0bb5ad609f0892cb113b2d2bd49a7933da Mon Sep 17 00:00:00 2001
From: shinchiro <shinchiro@users.noreply.github.com>
Date: Thu, 14 Sep 2017 18:53:07 +0800
Subject: [PATCH] d3d11: add missing enums

---
 mingw-w64-headers/direct-x/include/d3d11.h   |  95 ++++++++++++++++++-
 mingw-w64-headers/direct-x/include/d3d11.idl | 134 ++++++++++++++++++++++++++-
 2 files changed, 227 insertions(+), 2 deletions(-)

diff --git a/mingw-w64-headers/direct-x/include/d3d11.h b/mingw-w64-headers/direct-x/include/d3d11.h
index 52c7248..a352ed6 100644
--- a/mingw-w64-headers/direct-x/include/d3d11.h
+++ b/mingw-w64-headers/direct-x/include/d3d11.h
@@ -806,6 +806,10 @@ typedef enum D3D11_DEPTH_WRITE_MASK {
     D3D11_DEPTH_WRITE_MASK_ZERO = 0,
     D3D11_DEPTH_WRITE_MASK_ALL = 1
 } D3D11_DEPTH_WRITE_MASK;
+typedef enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS {
+    D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
+    D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
+} D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS;
 typedef enum D3D11_DEVICE_CONTEXT_TYPE {
     D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
     D3D11_DEVICE_CONTEXT_DEFERRED = 1
@@ -829,7 +833,16 @@ typedef enum D3D11_FEATURE {
     D3D11_FEATURE_ARCHITECTURE_INFO = 6,
     D3D11_FEATURE_D3D9_OPTIONS = 7,
     D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8,
-    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9
+    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9,
+    D3D11_FEATURE_D3D11_OPTIONS1 = 10,
+    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11,
+    D3D11_FEATURE_MARKER_SUPPORT = 12,
+    D3D11_FEATURE_D3D9_OPTIONS1 = 13,
+    D3D11_FEATURE_D3D11_OPTIONS2 = 14,
+    D3D11_FEATURE_D3D11_OPTIONS3 = 15,
+    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16,
+    D3D11_FEATURE_D3D11_OPTIONS4 = 17,
+    D3D11_FEATURE_SHADER_CACHE = 18
 } D3D11_FEATURE;
 typedef struct D3D11_FEATURE_DATA_THREADING {
     WINBOOL DriverConcurrentCreates;
@@ -838,6 +851,14 @@ typedef struct D3D11_FEATURE_DATA_THREADING {
 typedef struct D3D11_FEATURE_DATA_DOUBLES {
     WINBOOL DoublePrecisionFloatShaderOps;
 } D3D11_FEATURE_DATA_DOUBLES;
+typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT {
+    DXGI_FORMAT InFormat;
+    UINT OutFormatSupport;
+} D3D11_FEATURE_DATA_FORMAT_SUPPORT;
+typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
+    DXGI_FORMAT InFormat;
+    UINT OutFormatSupport2;
+} D3D11_FEATURE_DATA_FORMAT_SUPPORT2;
 typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
     WINBOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
 } D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;
@@ -857,6 +878,78 @@ typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS {
     WINBOOL ExtendedDoublesShaderInstructions;
     WINBOOL ExtendedResourceSharing;
 } D3D11_FEATURE_DATA_D3D11_OPTIONS;
+typedef struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO {
+    WINBOOL TileBasedDeferredRenderer;
+} D3D11_FEATURE_DATA_ARCHITECTURE_INFO;
+typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS {
+    WINBOOL FullNonPow2TextureSupport;
+} D3D11_FEATURE_DATA_D3D9_OPTIONS;
+typedef struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT {
+    WINBOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
+} D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT;
+typedef enum D3D11_SHADER_MIN_PRECISION_SUPPORT {
+    D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
+    D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2
+} D3D11_SHADER_MIN_PRECISION_SUPPORT;
+typedef struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT {
+    UINT PixelShaderMinPrecision;
+    UINT AllOtherShaderStagesMinPrecision;
+} D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT;
+typedef enum D3D11_TILED_RESOURCES_TIER {
+    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0,
+    D3D11_TILED_RESOURCES_TIER_1 = 1,
+    D3D11_TILED_RESOURCES_TIER_2 = 2,
+    D3D11_TILED_RESOURCES_TIER_3 = 3
+} D3D11_TILED_RESOURCES_TIER;
+typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS1 {
+    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
+    WINBOOL MinMaxFiltering;
+    WINBOOL ClearViewAlsoSupportsDepthOnlyFormats;
+    WINBOOL MapOnDefaultBuffers;
+} D3D11_FEATURE_DATA_D3D11_OPTIONS1;
+typedef struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
+    WINBOOL SimpleInstancingSupported;
+} D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT;
+typedef struct D3D11_FEATURE_DATA_MARKER_SUPPORT {
+    WINBOOL Profile;
+} D3D11_FEATURE_DATA_MARKER_SUPPORT;
+typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS1 {
+    WINBOOL FullNonPow2TextureSupported;
+    WINBOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
+    WINBOOL SimpleInstancingSupported;
+    WINBOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
+} D3D11_FEATURE_DATA_D3D9_OPTIONS1;
+typedef enum D3D11_CONSERVATIVE_RASTERIZATION_TIER {
+    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0,
+    D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
+    D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
+    D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
+} D3D11_CONSERVATIVE_RASTERIZATION_TIER;
+typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS2 {
+    WINBOOL PSSpecifiedStencilRefSupported;
+    WINBOOL TypedUAVLoadAdditionalFormats;
+    WINBOOL ROVsSupported;
+    D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
+    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
+    WINBOOL MapOnDefaultTextures;
+    WINBOOL StandardSwizzle;
+    WINBOOL UnifiedMemoryArchitecture;
+} D3D11_FEATURE_DATA_D3D11_OPTIONS2;
+typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS3 {
+    WINBOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
+} D3D11_FEATURE_DATA_D3D11_OPTIONS3;
+typedef struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
+    UINT MaxGPUVirtualAddressBitsPerResource;
+    UINT MaxGPUVirtualAddressBitsPerProcess;
+} D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;
+typedef enum D3D11_SHADER_CACHE_SUPPORT_FLAGS {
+    D3D11_SHADER_CACHE_SUPPORT_NONE = 0x0,
+    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 0x1,
+    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 0x2
+} D3D11_SHADER_CACHE_SUPPORT_FLAGS;
+typedef struct D3D11_FEATURE_DATA_SHADER_CACHE {
+    UINT SupportFlags;
+} D3D11_FEATURE_DATA_SHADER_CACHE;
 typedef enum D3D11_FILL_MODE {
     D3D11_FILL_WIREFRAME = 2,
     D3D11_FILL_SOLID = 3
diff --git a/mingw-w64-headers/direct-x/include/d3d11.idl b/mingw-w64-headers/direct-x/include/d3d11.idl
index 244020a..433c61c 100644
--- a/mingw-w64-headers/direct-x/include/d3d11.idl
+++ b/mingw-w64-headers/direct-x/include/d3d11.idl
@@ -460,6 +460,12 @@ typedef enum D3D11_DEPTH_WRITE_MASK
     D3D11_DEPTH_WRITE_MASK_ALL,
 } D3D11_DEPTH_WRITE_MASK;
 
+typedef enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
+{
+    D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
+    D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
+} D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS;
+
 typedef enum D3D11_DEVICE_CONTEXT_TYPE
 {
     D3D11_DEVICE_CONTEXT_IMMEDIATE,
@@ -488,7 +494,16 @@ typedef enum D3D11_FEATURE
     D3D11_FEATURE_ARCHITECTURE_INFO,
     D3D11_FEATURE_D3D9_OPTIONS,
     D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT,
-    D3D11_FEATURE_D3D9_SHADOW_SUPPORT
+    D3D11_FEATURE_D3D9_SHADOW_SUPPORT,
+    D3D11_FEATURE_D3D11_OPTIONS1,
+    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT,
+    D3D11_FEATURE_MARKER_SUPPORT,
+    D3D11_FEATURE_D3D9_OPTIONS1,
+    D3D11_FEATURE_D3D11_OPTIONS2,
+    D3D11_FEATURE_D3D11_OPTIONS3,
+    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT,
+    D3D11_FEATURE_D3D11_OPTIONS4,
+    D3D11_FEATURE_SHADER_CACHE,
 } D3D11_FEATURE;
 
 typedef struct D3D11_FEATURE_DATA_THREADING
@@ -502,6 +517,18 @@ typedef struct D3D11_FEATURE_DATA_DOUBLES
     BOOL DoublePrecisionFloatShaderOps;
 } D3D11_FEATURE_DATA_DOUBLES;
 
+typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
+{
+    DXGI_FORMAT InFormat;
+    UINT OutFormatSupport;
+} D3D11_FEATURE_DATA_FORMAT_SUPPORT;
+
+typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
+{
+    DXGI_FORMAT InFormat;
+    UINT OutFormatSupport2;
+} D3D11_FEATURE_DATA_FORMAT_SUPPORT2;
+
 typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
 {
     BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
@@ -525,6 +552,111 @@ typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS
     BOOL ExtendedResourceSharing;
 } D3D11_FEATURE_DATA_D3D11_OPTIONS;
 
+typedef struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
+{
+    BOOL TileBasedDeferredRenderer;
+} D3D11_FEATURE_DATA_ARCHITECTURE_INFO;
+
+typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS
+{
+    BOOL FullNonPow2TextureSupport;
+} D3D11_FEATURE_DATA_D3D9_OPTIONS;
+
+typedef struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
+{
+    BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
+} D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT;
+
+typedef enum D3D11_SHADER_MIN_PRECISION_SUPPORT
+{
+    D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
+    D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2
+} D3D11_SHADER_MIN_PRECISION_SUPPORT;
+
+typedef struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
+{
+    UINT PixelShaderMinPrecision;
+    UINT AllOtherShaderStagesMinPrecision;
+} D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT;
+
+typedef enum D3D11_TILED_RESOURCES_TIER
+{
+    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0,
+    D3D11_TILED_RESOURCES_TIER_1 = 1,
+    D3D11_TILED_RESOURCES_TIER_2 = 2,
+    D3D11_TILED_RESOURCES_TIER_3 = 3,
+} D3D11_TILED_RESOURCES_TIER;
+
+typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
+{
+    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
+    BOOL MinMaxFiltering;
+    BOOL ClearViewAlsoSupportsDepthOnlyFormats;
+    BOOL MapOnDefaultBuffers;
+} D3D11_FEATURE_DATA_D3D11_OPTIONS1;
+
+typedef struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
+{
+    BOOL SimpleInstancingSupported;
+} D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT;
+
+typedef struct D3D11_FEATURE_DATA_MARKER_SUPPORT
+{
+    BOOL Profile;
+} D3D11_FEATURE_DATA_MARKER_SUPPORT;
+
+typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
+{
+    BOOL FullNonPow2TextureSupported;
+    BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
+    BOOL SimpleInstancingSupported;
+    BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
+} D3D11_FEATURE_DATA_D3D9_OPTIONS1;
+
+typedef enum D3D11_CONSERVATIVE_RASTERIZATION_TIER {
+  D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED  = 0,
+  D3D11_CONSERVATIVE_RASTERIZATION_TIER_1         = 1,
+  D3D11_CONSERVATIVE_RASTERIZATION_TIER_2         = 2,
+  D3D11_CONSERVATIVE_RASTERIZATION_TIER_3         = 3,
+} D3D11_CONSERVATIVE_RASTERIZATION_TIER;
+
+
+typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
+{
+    BOOL PSSpecifiedStencilRefSupported;
+    BOOL TypedUAVLoadAdditionalFormats;
+    BOOL ROVsSupported;
+    D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
+    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
+    BOOL MapOnDefaultTextures;
+    BOOL StandardSwizzle;
+    BOOL UnifiedMemoryArchitecture;
+} D3D11_FEATURE_DATA_D3D11_OPTIONS2;
+
+
+typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
+{
+    BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
+} D3D11_FEATURE_DATA_D3D11_OPTIONS3;
+
+typedef struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
+{
+    UINT MaxGPUVirtualAddressBitsPerResource;
+    UINT MaxGPUVirtualAddressBitsPerProcess;
+} D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;
+
+typedef enum D3D11_SHADER_CACHE_SUPPORT_FLAGS
+{
+    D3D11_SHADER_CACHE_SUPPORT_NONE                     = 0x0,
+    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE   = 0x1,
+    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE     = 0x2,
+} D3D11_SHADER_CACHE_SUPPORT_FLAGS;
+
+typedef struct D3D11_FEATURE_DATA_SHADER_CACHE
+{
+    UINT SupportFlags;
+} D3D11_FEATURE_DATA_SHADER_CACHE;
+
 typedef enum D3D11_FILL_MODE
 {
     D3D11_FILL_WIREFRAME = 2,
-- 
2.14.1

